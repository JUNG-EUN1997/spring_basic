#spring.application.name=basic

# ⭐ .properties 파일 확장자 는 계층구조의 중복 발생
#   datasource.url=localhost:3306  /   datasource.driver-name=mariadb-driver  이런 형식

# ⭐ 대신 yml(와이엠엘), yaml(야물) 확장자 파일은 들여쓰기 계층구조 사용 가능
# 들여쓰기 중요!! 들여쓰기에 따라 안먹힘!
# 예시
#datasource.
#    url=localhost:3306
#    driver-name=mariadb-driver

# ⭐ 포트번호 변경 법 (default는 8080)  :: port가 자주 꼬이니 port kill을 진행해줘야한다
#server:
#  port: 8081

# ⭐ 정형화되어있는 코드
# github 업로드 시
spring:
  mvc:
    pathmatch:
#      Springboot2.4 이상에서는 기본적으로 PathPatternParser를 사용하고 있는데
#      springfox와 같은 일부 라이브러리 에서는 해당 pathpatern rule과 충돌나는 경우가 있어 path 방식 변경
      matching-strategy: ant_path_matcher
      # 안티패턴으로 가겠다! 라고 명시, 우리는 화이트리스트로 가겠다! 라는 것.
      # api 리스트를 불러올 때, 명시한 리스트만 불러오겠다 라는 것.


  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/basic
    username: root
    password: 1234
  jpa: # jpa 환경설정
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect # innoDB 사용 설정

#    table은 생성해주나, 스키마는 반드시 사전에 생성 필요
    generate-ddl: true # ddl 생성여부 확인

#    jpa는 인터페이스이고, hibernate는 구현체(실질적 기능 구현)
    hibernate:
#      create옵션은 매번 table을 drop 후 재생성 ✖️
#      update옵션은 변경사항만 alert를 적용하고 기존데이터 유지 ⭐⭐
#          변경사항 중 주로 추가사항만 반영. 삭제나 수정사항은 반영 안되는 경우도 있음.
#      validate는 실제DB와의 차이만을 check  :: 반영 하지 않는다.
      ddl-auto: update
#      콘솔창에 ddl, dml문을 출력하여 보여주는 옵션
    show_sql: true # 추후 실무에서는 log를 다 저장하기 때문에 나중에는 false로 두고 해야해
mybatis: # mybatis 환경설정
  mapper-locations: classpath:/mapper/**/*.xml  # **(별 2개) : 해당 폴더 내부에 있는 (폴더)나 (파일) (전부)를 포함한다.


